package main

import (
	"encoding/json"
	"fmt"
	"os"
)

type AutoGenerated struct {
	ID       int    `json:"id"`
	Code     string `json:"Code"`
	Ccy      string `json:"Ccy"`
	CcyNmRU  string `json:"CcyNm_RU"`
	CcyNmUZ  string `json:"CcyNm_UZ"`
	CcyNmUZC string `json:"CcyNm_UZC"`
	CcyNmEN  string `json:"CcyNm_EN"`
	Nominal  string `json:"Nominal"`
	Rate     string `json:"Rate"`
	Diff     string `json:"Diff"`
	Date     string `json:"Date"`
}

func main() {
	//
	//fmt.Println("a*x^2+b*x+c")
	//var (
	//	a, b, c int
	//	x1, x2  float64
	//)
	//fmt.Print("a ni kiriting: ")
	//fmt.Scan(&a)
	//fmt.Print("b ni kiriting: ")
	//fmt.Scan(&b)
	//fmt.Print("c ni kiriting: ")
	//fmt.Scan(&c)
	//d := b*b - 4*a*c
	//fmt.Println("Diskriminant = ", d)
	//if d > 0 {
	//	x1 = (-float64(b) + math.Sqrt(float64(d))) / 2 * float64(a)
	//	x2 = (-float64(b) - math.Sqrt(float64(d))) / 2 * float64(a)
	//	fmt.Println("x1,x2", x1, x2)
	//} else if d == 0 {
	//	x1 = (-float64(b) + math.Sqrt(float64(d))) / 2 * float64(a)
	//	fmt.Println("x1", x1)
	//} else {
	//	func() {
	//		fmt.Println("Panicking! disc<0")
	//		panic(fmt.Sprintf("%v", d))
	//	}()
	//}

	data, err := os.ReadFile("json.json")
	if err != nil {
		panic(err)
	}
	var Js []AutoGenerated
	err = json.Unmarshal(data, &Js)
	if err != nil {
		fmt.Println("Error unmarshaling JSON:", err)
		return
	}
	var val string
	fmt.Scan(&val)
	for _, Js := range Js {
		if val == Js.Ccy {
			fmt.Println(Js)
		}
	}

}
